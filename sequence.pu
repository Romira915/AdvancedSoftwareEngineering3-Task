@startuml 利用者登録

title 利用者登録
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant UserController
participant UserModel
participant UserRegisterView
participant User

user -> UserController : onClickUserRegister(name, password)

activate UserController
UserController -> UserModel : userRegister(name, password)

activate UserModel
UserModel -> User : user=newUser(name, password)

activate User
User -> EncryptionService : passHash=hash(str): String
User -> UUID : id=newUUID(): UUID
UserModel <-- User
deactivate User

UserModel -> UserModel : appendUser(user)
UserController <-- UserModel
deactivate UserModel

UserRegisterView <-- UserController : moveMembershipPage()
deactivate UserController

@enduml

@startuml ログインする

title ログインする
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant LoginController
participant UserModel
participant LoginView

user -> LoginController : onClickLogin(id, password)

group Login
    activate LoginController
    LoginController -> UserModel : login(id, password)

    activate UserModel 
    UserModel -> UserModel : user=getUser(id): User
    UserModel -> User : isOk=LoginValidation(password): Bool

    activate User
    User -> EncryptionService : passHash=hash(str): String
    UserModel <-- User
    LoginController <-- UserModel
    deactivate User

    deactivate UserModel

    alt isOk = true
        LoginView <- LoginController : moveMembershipPage()
    else 
        LoginView <- LoginController : showLoginErrorMessage()
    end

    deactivate LoginController
    deactivate LoginView
end

@enduml

@startuml 貸出手続

title 貸出手続
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant LoginController
participant UserModel
participant BookLendController
participant BookModel
participant BookLendView
participant BarcodeReader

user -> LoginController : onClickLogin(userid, password)
ref over UserModel, LoginController : Login

user -> BookLendController : onClickLend()

activate BookLendController
BookLendController -> BookModel : lend()

activate BookModel
BookModel -> BarcodeReader : bookId=read() : UUID

activate BarcodeReader
user -> BarcodeReader : readBook()
BookModel <-- BarcodeReader
deactivate

UserModel <- BookModel : getMe() : User

BookModel -> BookModel : book=getBook(bookId)

BookModel -> Book : lock()
BookModel -> Book : isLoan=isLoan(): Bool
alt isLoan = true
    BookModel -> Book : unlock()
    BookLendController <-- BookModel
    BookLendController -> BookLendView : showLendErrorMessage()
else 
    BookModel -> Book : setLendByUser(userId)
    BookModel -> Book : unlock()

    BookLendController <-- BookModel
    BookLendController -> BookLendView : moveLendCompletedPage()
end
deactivate BookModel

@enduml 

@startuml 返却手続

title 返却手続
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant LoginController
participant UserModel
participant BookReturnController
participant BookModel
participant BookLendView
participant User

user -> LoginController : onClickLogin(userId, password)
ref over UserModel, LoginController : Login

user -> BookReturnController : onClickReturnBook()

activate BookReturnController
BookReturnController -> BookModel : getLendedList()

activate BookModel
UserModel <- BookModel : getMe() : User

BookModel -> User : lendedList=getLendedList()
BookReturnController <-- BookModel
deactivate BookModel

BookReturnController -> BookLendView : showLendedList(lendedList)

user -> BookReturnController : selectReturnBook()
BookReturnController -> BookModel : returnBook(bookId)

activate BookModel
BookModel -> BookModel : book=getBook(bookId)
BookModel -> Book : returnBook()
deactivate BookModel

@enduml

@startuml AV室予約

title AV室予約
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant LoginController
participant UserModel
participant RoomReservationController
participant RoomReservationModel
participant RoomReservationView

user -> LoginController : onClicklogin(userId, password)
ref over UserModel, LoginController : Login

user -> RoomReservationController : onClickRoomReservation()

activate RoomReservationController
RoomReservationController -> RoomReservationModel : roomList=getVacantRoomList()
RoomReservationController -> RoomReservationView : showRoomList(roomList)

user -> RoomReservationController : selectRoom()
RoomReservationController -> RoomReservationModel : roomReservation(roomId)

activate RoomReservationModel
UserModel <- RoomReservationModel : getMe()
RoomReservationModel -> RoomReservationModel : getRoom(roomId)

RoomReservationModel -> Room : lock()
RoomReservationModel -> Room : roomStatus=getStatus(): RoomStatus
alt roomStatus=Vacant
    RoomReservationModel -> Room : reserve(userId)
    RoomReservationModel -> Room : unlock()

    RoomReservationController <-- RoomReservationModel
    RoomReservationController -> RoomReservationView : moveReservedPage()
else
    RoomReservationModel -> Room : unlock()

    RoomReservationController <-- RoomReservationModel
    RoomReservationController -> RoomReservationView : showReservedMessage()
end
deactivate RoomReservationModel

@enduml

@startuml 登録ユーザ一覧表示

title 登録ユーザ一覧表示
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 管理者 as admin
participant AdminController
participant UserModel
participant AdminView

admin -> AdminController : onClickUserList()

activate AdminController
AdminController -> UserModel : userList=getUserList()
AdminController -> AdminView : showUserList(userList)

@enduml

@startuml 貸出中ユーザ一覧表示

title 貸出中ユーザ一覧表示
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 管理者 as admin
participant AdminController
participant UserModel
participant AdminView

admin -> AdminController : onClickOnLoanUserList()

activate AdminController
AdminController -> UserModel : userList=getOnLoanUserList()
AdminController -> AdminView : showUserList(userList)

@enduml