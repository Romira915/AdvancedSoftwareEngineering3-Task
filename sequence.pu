@startuml 利用者登録

!include style.pu
title 利用者登録
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant Client
participant UserRegisterController
participant UserModel
participant UserRegisterView
participant User

user -> UserRegisterController : onClickUserRegister(name, password)

activate UserRegisterController
UserRegisterController -> UserModel : userRegister(name, password): User

activate UserModel
UserModel -> User : user=newUser(name, password)

activate User

User -> EncryptionService : passHash=hash(str): String
activate EncryptionService
User <<-- EncryptionService
deactivate EncryptionService

User -> UUID : id=newUUID(): UUID
activate UUID
User <<-- UUID
deactivate

UserModel <<-- User
deactivate User

UserModel -> UserModel : appendUser(user)
UserRegisterController <<-- UserModel
deactivate UserModel

Client <- UserRegisterController : setLoginUser(user)
activate Client
Client -->> UserRegisterController
deactivate Client

UserRegisterView <<- UserRegisterController : moveMembershipPage()
activate UserRegisterView
UserRegisterView -->> UserRegisterController
deactivate UserRegisterView

user <<-- UserRegisterController
deactivate UserRegisterController

@enduml

@startuml ログインする

!include style.pu
title ログインする
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant Client
participant LoginController
participant UserModel
participant LoginView

user -> LoginController : onClickLogin(id, password)

group Login
    activate LoginController
    LoginController -> UserModel : result=login(id, password): Result<User, _>

    activate UserModel 
    UserModel -> UserModel : user=getUser(id): User
    UserModel -> User : isOk=LoginValidation(password): Bool

    activate User
    User -> EncryptionService : passHash=hash(str): String
    activate EncryptionService
    User <<-- EncryptionService
    deactivate EncryptionService

    UserModel <<-- User
    deactivate User

    alt isOk == true
    LoginController <<-- UserModel : Ok
    else
    LoginController <<-- UserModel : Err
    end

    deactivate UserModel

    alt result == Ok(user)
        Client <- LoginController : setLoginUser(user)
        activate Client
        Client -->> LoginController
        deactivate Client

        LoginView <<- LoginController : moveMembershipPage()
        activate LoginView
        LoginView -->> LoginController
        deactivate LoginView
    else 
        LoginView <<- LoginController : showLoginErrorMessage()
        activate LoginView
        LoginView -->> LoginController
        deactivate LoginView
    end

    user <<-- LoginController
    deactivate LoginController
    deactivate LoginView
end

@enduml

@startuml 貸出手続

!include style.pu
title 貸出手続
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant Client
participant LoginController
participant BookLendController
participant BookModel
participant UserModel
participant BookLendView
participant BarcodeReader
participant Book
participant User

user -> LoginController : onClickLogin(userid, password)
ref over Client, LoginController : Login

user -> BookLendController : onClickLend()

activate BookLendController
Client <- BookLendController : getMe() : User
activate Client
Client -->> BookLendController
deactivate Client

BookLendController -> BookModel : result=lend(userId): Result<UUID>

activate BookModel
BookModel -> BarcodeReader : bookId=read() : UUID

activate BarcodeReader
BookModel <<-- BarcodeReader
deactivate

BookModel -> BookModel : book=getBook(bookId)

BookModel -> Book : lock()
activate Book
BookModel <<-- Book
deactivate Book

BookModel -> Book : canLend=canLend(): Bool
activate Book
BookModel <<-- Book
deactivate Book

alt canLend == true
    BookModel -> Book : setLendByUser(userId)
    activate Book
    BookModel <<-- Book
    deactivate Book

    BookModel -> Book : unlock()
    activate Book
    BookModel <<-- Book
    deactivate Book

    BookLendController <<-- BookModel : Ok
    BookLendController ->> BookLendView : moveLendCompletedPage()
    activate BookLendView
    BookLendController <<-- BookLendView : 
    deactivate BookLendView
else
    BookModel -> Book : unlock()
    activate Book
    BookModel <<-- Book
    deactivate Book

    BookLendController <<-- BookModel : Err
    BookLendController ->> BookLendView : showLendErrorMessage()
    activate BookLendView
    BookLendController <<-- BookLendView 
    deactivate BookLendView
end

BookLendController <<-- BookModel
deactivate BookModel

alt result == Ok(bookId)
    BookLendController -> UserModel : setLendBook(userId, bookId)    
    activate UserModel
    UserModel -> UserModel : getUser(userId)

    UserModel -> User : setLendBook(bookId)
    activate User
    UserModel <<-- User
    deactivate
    
    BookLendController <<-- UserModel
    deactivate UserModel
else
end

user <<-- BookLendController
deactivate BookLendController

@enduml 

@startuml 返却手続

!include style.pu
title 返却手続
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant Client
participant LoginController
participant BookReturnController
participant BookModel
participant UserModel
participant BookReturnView
participant User

user -> LoginController : onClickLogin(userId, password)
ref over Client, LoginController : Login

user -> BookReturnController : onClickReturnBook()

activate BookReturnController

Client <- BookReturnController : getMe() : User
activate Client
Client -->> BookReturnController
deactivate

BookReturnController -> UserModel : lendedList=getLendedList(userId)
activate UserModel
BookReturnController <<-- UserModel
deactivate UserModel

BookReturnController -> BookReturnView : showLendedList(lendedList)
activate BookReturnView
BookReturnController <<-- BookReturnView
deactivate BookReturnView

user <<-- BookReturnController
deactivate BookReturnController

user -> BookReturnController : selectReturnBook()
activate BookReturnController
BookReturnController -> BookModel : returnBook(bookId)

activate BookModel
BookModel -> BookModel : book=getBook(bookId)

BookModel -> Book : returnBook()
activate Book
BookModel <<-- Book
deactivate Book

BookReturnController <<-- BookModel
deactivate BookModel

BookReturnController -> UserModel: returnBook(userId, bookId)
activate UserModel
UserModel -> UserModel : user=getUser(userId): User
UserModel -> User: returnBook(bookId)
activate User
UserModel <<-- User
deactivate User
BookReturnController <<-- UserModel
deactivate UserModel

BookReturnController ->> BookReturnView : moveReturnCompletedPage()
activate BookReturnView
BookReturnController <<-- BookReturnView
deactivate BookReturnView

user <<-- BookReturnController
deactivate BookReturnController

@enduml

@startuml AV室予約

!include style.pu
title AV室予約
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 学生 as user
participant Client
participant LoginController
participant RoomReservationController
participant RoomReservationModel
participant RoomReservationView

user -> LoginController : onClicklogin(userId, password)
ref over Client, LoginController : Login

user -> RoomReservationController : onClickRoomReservation()
activate RoomReservationController

RoomReservationController -> RoomReservationModel : roomList=getVacantRoomList()
activate RoomReservationModel
RoomReservationController <<-- RoomReservationModel
deactivate RoomReservationModel

RoomReservationController -> RoomReservationView : showRoomList(roomList)
activate RoomReservationView
RoomReservationController <<-- RoomReservationView
deactivate RoomReservationView

user <<-- RoomReservationController
deactivate RoomReservationController

user -> RoomReservationController : selectRoom()
activate RoomReservationController

Client <- RoomReservationController : me=getMe()
activate Client
Client -->> RoomReservationController
deactivate Client

alt Type(me) != Student
    RoomReservationController -> RoomReservationView : showReservationErrorMessage()
    activate RoomReservationView
    RoomReservationController <<-- RoomReservationView
    deactivate RoomReservationView
    user <<-- RoomReservationController
else
end

RoomReservationController -> RoomReservationModel : roomReservation(student: Student, roomId)

activate RoomReservationModel
RoomReservationModel -> RoomReservationModel : getRoom(roomId)

RoomReservationModel -> Room : lock()
activate Room
RoomReservationModel <<-- Room
deactivate Room

RoomReservationModel -> Room : roomStatus=getStatus(): RoomStatus
activate Room
RoomReservationModel <<-- Room
deactivate Room

alt roomStatus == Vacant
    RoomReservationModel -> Room : reserve(userId)
    activate Room
    RoomReservationModel <<-- Room
    deactivate Room

    RoomReservationModel -> Room : unlock()
    activate Room
    RoomReservationModel <<-- Room
    deactivate Room

    RoomReservationController <<-- RoomReservationModel
    RoomReservationController ->> RoomReservationView : moveReservedPage()
    activate RoomReservationView
    RoomReservationController <<-- RoomReservationView
    deactivate RoomReservationView
else
    RoomReservationModel -> Room : unlock()
    activate Room
    RoomReservationModel <<-- Room
    deactivate Room

    RoomReservationController <<-- RoomReservationModel
    RoomReservationController ->> RoomReservationView : showReservationErrorMessage()
    activate RoomReservationView
    RoomReservationController <<-- RoomReservationView
    deactivate RoomReservationView
end

deactivate RoomReservationModel

user <<-- RoomReservationController
deactivate RoomReservationController

@enduml

@startuml 登録ユーザ一覧表示

!include style.pu
title 登録ユーザ一覧表示
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 管理者 as admin
participant Client
participant LoginController
participant AdminController
participant UserModel
participant AdminView

admin -> LoginController : onClicklogin(userId, password)
ref over Client, LoginController : Login

admin -> AdminController : onClickUserList()

activate AdminController

Client <- AdminController : me=getMe()
activate Client
Client -->> AdminController
deactivate Client

alt Type(me) == Administrator
    AdminController -> UserModel : userList=getUserList()
    activate UserModel
    AdminController <<-- UserModel
    deactivate UserModel

    AdminController ->> AdminView : showUserList(userList)
    activate AdminView
    AdminController <<-- AdminView
    deactivate AdminView

    admin <<-- AdminController

else
    AdminController ->> AdminView : movePermissionDeniedErrorPage()
    activate AdminView
    AdminController <<-- AdminView
    deactivate AdminView

    admin <<-- AdminController

    destroy AdminController
    
end

@enduml

@startuml 貸出中ユーザ一覧表示

!include style.pu
title 貸出中ユーザ一覧表示
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 管理者 as admin
participant Client
participant LoginController
participant AdminController
participant UserModel
participant AdminView

admin -> LoginController : onClicklogin(userId, password)
ref over Client, LoginController : Login

admin -> AdminController : onClickOnLoanUserList()
activate AdminController


Client <- AdminController : me=getMe()
activate Client
Client -->> AdminController
deactivate Client

alt Type(me) == Administrator
    AdminController -> UserModel : userList=getOnLoanUserList()
    activate UserModel

    AdminController <<-- UserModel
    deactivate UserModel

    AdminController ->> AdminView : showUserList(userList)
    activate AdminView
    AdminController <<-- AdminView
    deactivate AdminView

    admin <<-- AdminController
else
    AdminController ->> AdminView : movePermissionDeniedErrorPage()
    activate AdminView
    AdminController <<-- AdminView
    deactivate AdminView

    admin <<-- AdminController
    destroy AdminController
end

@enduml

@startuml 本の貸出を予約する

!include style.pu
title 本の貸出を予約する
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant Client
participant LoginController
participant BookReservationController
participant BookModel
participant BookReservationView
participant Book

user -> LoginController : onClicklogin(userId, password)
ref over Client, LoginController : Login

user -> BookReservationController : onClickBookReservation()

activate BookReservationController
Client <- BookReservationController : getMe()
activate Client
Client -->> BookReservationController
deactivate Client

BookReservationController -> BookModel : isOk=reservationBook(userId, bookId): Bool

activate BookModel
BookModel -> BookModel : getBook(bookId)

BookModel -> Book : lock()
activate Book
BookModel <<-- Book
deactivate Book

BookModel -> Book : numReservation=getNumReservation()
activate Book
BookModel <<-- Book
deactivate Book

alt numReservation <= 3
    BookModel -> Book : reservation(userId)
    activate Book
    BookModel <<-- Book
    deactivate Book
    
    BookModel -> Book : unlock()
    activate Book
    BookModel <<-- Book
    deactivate Book

    BookReservationController <<-- BookModel: true
else
    BookModel -> Book : unlock()
    activate Book
    BookModel <<-- Book
    deactivate Book
    
    BookReservationController <<-- BookModel: false
end
deactivate BookModel

alt isOk == true
    BookReservationController ->> BookReservationView : moveReservedPage()
    activate BookReservationView
    BookReservationController <<-- BookReservationView
    deactivate BookReservationView
else
    BookReservationController ->> BookReservationView : showReservationErrorMessage()
    activate BookReservationView
    BookReservationController <<-- BookReservationView
    deactivate BookReservationView
end


user <<-- BookReservationController
deactivate BookReservationController

@enduml

@startuml 本を検索する

!include style.pu
title 本を検索する
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant BookSearchController
participant BookModel
participant BookSearchView
participant Book
participant String

user -> BookSearchController : onClickSearch(query)
activate BookSearchController

BookSearchController -> BookModel : bookList=searchBook(query): Book[]
activate BookModel
loop len(bookList)
    BookModel -> Book : title=getTitle()
    activate Book
    BookModel <<-- Book 
    deactivate Book

    BookModel -> String : isMatch=contains(query): Bool
    activate String
    BookModel <<-- String
    deactivate String

    alt isMatch == true
        BookModel -> BookModel : matchedBookList=append(book): Book[]
    else
    end
end
BookSearchController <<-- BookModel
deactivate BookModel

BookSearchController ->> BookSearchView : showBookList(bookList)
activate BookSearchView
BookSearchController <<-- BookSearchView
deactivate BookSearchView

user <<-- BookSearchController
deactivate BookSearchController

@enduml

