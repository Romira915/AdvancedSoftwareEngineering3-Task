@startuml 利用者登録

!include style.pu
title 利用者登録
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant Client
participant UserRegisterController
participant UserModel
participant UserRegisterView
participant User

user -> UserRegisterController : onClickUserRegister(name, password)

activate UserRegisterController
UserRegisterController -> UserModel : userRegister(name, password): User

activate UserModel
UserModel -> User : user=newUser(name, password)

activate User
User -> EncryptionService : passHash=hash(str): String
User -> UUID : id=newUUID(): UUID
UserModel <-- User
deactivate User

UserModel -> UserModel : appendUser(user)
UserRegisterController <-- UserModel
deactivate UserModel

Client <- UserRegisterController : setLoginUser(user)
UserRegisterView <-- UserRegisterController : moveMembershipPage()
deactivate UserRegisterController

@enduml

@startuml ログインする

!include style.pu
title ログインする
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant Client
participant LoginController
participant UserModel
participant LoginView

user -> LoginController : onClickLogin(id, password)

group Login
    activate LoginController
    LoginController -> UserModel : result=login(id, password): Result<User, _>

    activate UserModel 
    UserModel -> UserModel : user=getUser(id): User
    UserModel -> User : isOk=LoginValidation(password): Bool

    activate User
    User -> EncryptionService : passHash=hash(str): String
    UserModel <-- User
    LoginController <-- UserModel
    deactivate User

    deactivate UserModel

    alt result == Ok(user)
        Client <- LoginController : setLoginUser(user)
        LoginView <- LoginController : moveMembershipPage()
    else 
        LoginView <- LoginController : showLoginErrorMessage()
    end

    deactivate LoginController
    deactivate LoginView
end

@enduml

@startuml 貸出手続

!include style.pu
title 貸出手続
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant Client
participant LoginController
participant BookLendController
participant BookModel
participant BookLendView
participant BarcodeReader

user -> LoginController : onClickLogin(userid, password)
ref over Client, LoginController : Login

user -> BookLendController : onClickLend()

activate BookLendController
Client <- BookLendController : getMe() : User
BookLendController -> BookModel : lend(userId)

activate BookModel
BookModel -> BarcodeReader : bookId=read() : UUID

activate BarcodeReader
user -> BarcodeReader : readBook()
BookModel <-- BarcodeReader
deactivate

BookModel -> BookModel : book=getBook(bookId)

BookModel -> Book : lock()
BookModel -> Book : canLend=canLend(): Bool
alt canLend == true
    BookModel -> Book : setLendByUser(userId)
    BookModel -> Book : unlock()

    BookLendController <-- BookModel
    BookLendController -> BookLendView : moveLendCompletedPage()
else
    BookModel -> Book : unlock()
    BookLendController <-- BookModel
    BookLendController -> BookLendView : showLendErrorMessage()
end
deactivate BookModel

@enduml 

@startuml 返却手続

!include style.pu
title 返却手続
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant Client
participant LoginController
participant BookReturnController
participant BookModel
participant BookReturnView
participant User

user -> LoginController : onClickLogin(userId, password)
ref over Client, LoginController : Login

user -> BookReturnController : onClickReturnBook()

activate BookReturnController

Client <- BookReturnController : getMe() : User
BookReturnController -> BookModel : getLendedList(userId)

BookReturnController -> BookReturnView : showLendedList(lendedList)

user -> BookReturnController : selectReturnBook()
BookReturnController -> BookModel : returnBook(bookId)

activate BookModel
BookModel -> BookModel : book=getBook(bookId)
BookModel -> Book : returnBook()
BookReturnController <-- BookModel
deactivate BookModel

BookReturnController -> BookReturnView : moveReturnCompletedPage()

@enduml

@startuml AV室予約

!include style.pu
title AV室予約
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 学生 as user
participant Client
participant LoginController
participant RoomReservationController
participant RoomReservationModel
participant RoomReservationView

user -> LoginController : onClicklogin(userId, password)
ref over Client, LoginController : Login

user -> RoomReservationController : onClickRoomReservation()

activate RoomReservationController
RoomReservationController -> RoomReservationModel : roomList=getVacantRoomList()
RoomReservationController -> RoomReservationView : showRoomList(roomList)

user -> RoomReservationController : selectRoom()
Client <- RoomReservationController : getMe()
RoomReservationController -> RoomReservationModel : roomReservation(student: Student, roomId)

activate RoomReservationModel
RoomReservationModel -> RoomReservationModel : getRoom(roomId)

RoomReservationModel -> Room : lock()
RoomReservationModel -> Room : roomStatus=getStatus(): RoomStatus
alt roomStatus == Vacant
    RoomReservationModel -> Room : reserve(userId)
    RoomReservationModel -> Room : unlock()

    RoomReservationController <-- RoomReservationModel
    RoomReservationController -> RoomReservationView : moveReservedPage()
else
    RoomReservationModel -> Room : unlock()

    RoomReservationController <-- RoomReservationModel
    RoomReservationController -> RoomReservationView : showReservedMessage()
end
deactivate RoomReservationModel

@enduml

@startuml 登録ユーザ一覧表示

!include style.pu
title 登録ユーザ一覧表示
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 管理者 as admin
participant Client
participant LoginController
participant AdminController
participant UserModel
participant AdminView

admin -> LoginController : onClicklogin(userId, password)
ref over Client, LoginController : Login

admin -> AdminController : onClickUserList()

activate AdminController
Client <- AdminController : me=getMe()
alt Type(me) == Administrator
    AdminController -> UserModel : userList=getUserList()
    AdminController -> AdminView : showUserList(userList)
else
    AdminController -> AdminView : movePermissionDeniedErrorPage()
    destroy AdminController
end

@enduml

@startuml 貸出中ユーザ一覧表示

!include style.pu
title 貸出中ユーザ一覧表示
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 管理者 as admin
participant Client
participant LoginController
participant AdminController
participant UserModel
participant AdminView

admin -> LoginController : onClicklogin(userId, password)
ref over Client, LoginController : Login

admin -> AdminController : onClickOnLoanUserList()

activate AdminController
Client <- AdminController : me=getMe()
alt Type(me) == Administrator
    AdminController -> UserModel : userList=getOnLoanUserList()
    AdminController -> AdminView : showUserList(userList)
else
    AdminController -> AdminView : movePermissionDeniedErrorPage()
    destroy AdminController
end

@enduml

@startuml 本の貸出を予約する

!include style.pu
title 本の貸出を予約する
skinparam dpi 150
skinparam responseMessageBelowArrow true
skinparam style strictuml

actor 一般 as user
participant Client
participant LoginController
participant BookReservationController
participant BookModel
participant BookReservationView
participant User
participant Book

user -> LoginController : onClicklogin(userId, password)
ref over Client, LoginController : Login

user -> BookReservationController : onClickBookReservation()

activate BookReservationController
Client <- BookReservationController : getMe()
BookReservationController -> BookModel : reservationBook(userId, bookId)

activate BookModel
BookModel -> BookModel : getBook(bookId)

BookModel -> Book : lock()
BookModel -> Book : numReservation=getNumReservation()

alt numReservation <= 3
    BookModel -> Book : reservation(userId)
    BookModel -> Book : unlock()
    BookReservationController <-- BookModel
    BookReservationController -> BookReservationView : moveReservedPage()
else
    BookModel -> Book : unlock()
    BookReservationController <-- BookModel
    BookReservationController -> BookReservationView : showReservationErrorMessage()
end
deactivate BookModel

@enduml
